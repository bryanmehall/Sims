object = new object
    name:"object"
attribute = new object
    name:"attribute"
get = new object
    definition:{initial} //no name and definition is primitive to avoid infinite loop
functionalRep = new attribute
    name:"functionalRep"
functionalRepresentation = new object
    name:"functionalRepresentation"
compile = new object
    name:"compile"
definition = new attribute
    name: "definition"
jsModule = new attribute
    name:"jsModule"
assemble = new object
    name:"assemble"
call = new object
    name:"call"
app = new object
    name:"app"
    lynxText: new object
        name:"lynxTextInput"
    definition:parse(app.lynxText, "app")
    jsModule:assemble(compile(app.definition)) //for canvas: assemble(compile(app.definition, canvasPrimitive))
    mouse: new object
        name:"mouse1"
        down: new bool
            instanceOf:\bool
            defaultState:false
            jsRep:{mouseDown}
        pos: new coordinatePosition
            x:new number
                instanceOf:\number
                jsRep:{mouseX}
            y:new number
                instanceOf:\number
                jsRep:{mouseY}
        op1: app.mouse.down.previousState
        clicked: condition(false)
            if app.mouse.down.previousState && !app.mouse.down && !app.mouse.clicked.previousState then true
            false
        isPressedDown: condition(false)
            if !app.mouse.down.previousState && app.mouse.down && !app.mouse.isPressedDown.previousState then true
            false
    keyboard: new object
        name:"appkeyboard"
        currentKeysDown: new array
            name:"currentKeys"
            length:0
    graphicalRepresentation:\window
canvasRep = new attribute
    name:"canvasRep"
canvasIR = new attribute
    name:"canvasIR"
currentKeysPressed = new attribute
    name:"currentKeyPressed"
previousState = new attribute
    name:"previousState"
defaultState = new attribute
    name:"defaultState"
lynxText = new attribute
    name:"lynxText"
keyboard = new attribute
    name: "keyboard"

currentKeysDown = new attribute
    name:"currentKeysDown"
isPressedDown = new attribute
    name:"isPressedDown"
input = new object
    name:"input"
number = new object
    name:"number"
    equalTo:number
bool = new object
    name: "bool"
    equalTo:bool

string = new object
    name:"string"
    equalTo:string

group = new object
    name:"group"
    canvasRep:group.childElements[0].canvasRep

childElement1 = new attribute
    name:"childElement1"
    inverseAttribute: \parentGroup

childElement2 = new attribute
    name:"childElement2"
    inverseAttribute: \parentGroup

parentGroup = new attribute
    name:"parentGroup"

div = new group
    name:"div"
    childElement1: div.firstElement
    firstElement:new text
        innerText:"abc"
        x:div.parentGroup.x
        y:100 //div.parentGroup.pos.y
        nextElement: new text
            innerText:"abc"
            x:10
            y:100

firstElement = new attribute
    name:"firstElement"

nextElement = new attribute
    name:"nextElement"
    inverseAttribute:\previousElement

previousElement = new attribute
    name:"previousElement"

value = new attribute
    name:"value"
arrayElement = new attribute
    name:"arrayElement"
    inverseAttribute:\parentArray
parentArray = new attribute
    name:"parentArray"
elementValue = new attribute
    name:"elementValue"
    inverseAttribute:\parentElement

parentElement = new attribute
    name:"parentElement"

parentConcept = new attribute
    name:"parentConcept"

textRepresentation = new attribute
    name:"textRepresentation"
    inverseAttribute:\parentConcept

graphicalRepresentation = new attribute
    name:"graphicalRepresentation"
    inverseAttribute:\parentConcept
accordianRep = new attribute
    name:"accordianRep"
    inverseAttribute:\parentConcept

attributes = new attribute
    name:"attributes"
jsRep = new attribute
    name:"jsRep"
jsPrimitive = new attribute
    name:"jsPrimitive"
parse = new func
    name:"parse"
childElements = new attribute
    name:"childElements"
    inverseAttribute:\parentElement
name = new attribute
    name:"name"
parentValue = new attribute
    name:"parentValue"
inverseAttribute = new attribute
    name:"inverseAttribute"
instanceOf = new attribute
    name:"instanceOf"
prevVal = new attribute
    name:"prevVal"
    textRepresentation:new text
        name:"textRep"
        innerText:"abc"
        x:10
        y:10

type = new attribute
    name:"type"
equalTo = new attribute
    name:"equalTo"
mouse = new attribute
    name:"mouse"
set = new object
    name:"set"
array = new object
    name:"array"
    length:2

length = new attribute
    name:"length"
arrayLength = new func
    name:"arrayLength"
index = new attribute
    name:"index"
setEquiv = new attribute
    name:"setEquiv"
subset1 = new attribute
    name:"subset1"
subset2 = new attribute
    name:"subset2"

text = new object
    name:"text"
    r:0
    g:0
    b:0
    x:text.pos.x
    y:text.pos.y
    canvasRep:"ctx.font = '18px Arial'; ctx.fillText('"+text.innerText+"', "+text.x+", "+text.y+")"
    pos: new coordinatePosition
        x:app.mouse.pos.x
        y:app.mouse.pos.y

pos = new attribute
    name:"pos"
x = new attribute
    name:"x"
y = new attribute
    name:"y"
coordinatePosition = new attribute
    name:"coordinatePosition"

innerText = new attribute
    name:"innerText"
r = new attribute
    name:"r"
g = new attribute
    name:"g"
b = new attribute
    name:"b"
width = new attribute
    name:"width"
height = new attribute
    name:"height"

line = new object
    name:"line"
    r:0
    g:0
    b:0
    x1:0
    y1:0
    x2:20
    y2:20
x1 = new attribute
    name:"x1"
y1 = new attribute
    name:"y1"
x2 = new attribute
    name:"x2"
y2 = new attribute
    name:"y2"

rootObject = new attribute
    name:"rootObject"
forEach = new attribute
    name:"forEach"

condition = new attribute
    name:"condition"
then = new attribute
    name:"then"
alt = new attribute
    name:"alt"

down = new attribute
    name:"down"
clicked = new attribute
    name:"clicked"
localSearch = new object
    name:"localSearch"
query = new attribute
    name:"query"
search = new object
    name:"search"

func = new object
    name:"func"
apply = new object
    name:"apply"
    equalTo:apply.function.result.equalTo //get numerical equiv of result of function --replace with optimization

op1 = new attribute
    name:"op1"
op2 = new attribute
    name:"op2"
op3 = new attribute
    name:"op3"
op4 = new attribute
    name:"op4"
result = new attribute
    name:"result"
caller = new attribute
    name:"caller"
function = new attribute
    name:"function"
    inverseAttribute:\caller
funct = new object
    name:"funct"
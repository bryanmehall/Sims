window = new group
    childElement1: new text
        x:new get
            jsPrimitive:{get}
            attribute:equalTo
            rootObject:new apply
                name:"apply"
                function: sum
                equalTo:apply.function.result
                op1:new list
                    length:1
                    firstElement:new element
                        value:11
                        nextElement: new element
                            value:9
        y:20
        innerText:"test"

sum = new function //new is just short for new object...isA --parent chain
    name:"sum"
    list: sum.caller.op1
    result: new ternary //{sum.list.length, sum.list}
        condition: sum.list.length == 1
        then: 10
        alt: new get
            attr:equalTo
            root: new apply //sum.list[0] +sum(splice(1, sum.list))
                function: addition
                op1:new get
                    attr:equalTo
                    root: new object
                        result:50
                op2:50
            equalTo:addition.result

list = new object
length = new attribute
/*      
getIndex = new function //for general lists
    list<list>:caller.list
    index<nat>:caller.index
    wasmPrimitive:minResources(getIndex.wasmPrimitives)
    wasmPrimitives:{
        list.structPrimitive = lynxList ? new _____
            
        list.structPrimitive = array ? new wasmSubroutine
            address: list.structPrimitive.address+structPrimitive.
            ops:[
                
                i32.load
            ] 
        list.structPrimitive == linkedList 
            
    }

splice = new function
    name: "splice"
    op1<list>:splice.caller.op1
    result: new list
        
  
addition = new function
    wasmPrimitive:new wasmSubroutine
        ops:[get_local op1.wasmPrimitive, get_local_op2.wasmPrimitive, i32.add]
    computationTime: 3

    
list = new object
    graphicalRepresentation: new group
        childElement1: new rectangle
        childElement2: 
    firstElement <element>: new element
        value:1
    lastElement: <element>:
    length: 
    structPrimitive: minResources(list.structPrimitives, runEstimate)
    structPrimitives:{linkedList, array, lynxList} //lynxList goes to interpreter

linkedList = new struct
    value<int32>:1
    allocatedMemory:
        address:
        totalSize:
        locations:
    nextList<linkedList | null>: 

array = new struct
    length<int>:array.parentConcept.length
    memorySize:array.length*elements.structPrimitive.allcatedMemory.totalSize
*/